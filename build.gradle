plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
    id "org.flywaydb.flyway" version "8.5.13"
    id 'jacoco'
    id "org.sonarqube" version "3.0"
}

group = 'com.mungta'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jacoco {

    toolVersion = '0.8.5'
    reportsDir = file("$buildDir/jacoco")
}
jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true

        html.destination file("$buildDir/jacoco/jacoco.html")
        xml.destination file("$buildDir/jacoco/jacoco.xml")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            "com/mungta/questionsservice/QuestionsServiceApplication.class",
                            "com/mungta/questionsservice/common/**",
                            "com/mungta/questionsservice/config/**",
                            "com/mungta/questionsservice/domain/BaseEntity.class",
                            "com/mungta/questionsservice/domain/question/dto/**",
                            "com/mungta/questionsservice/domain/response/dto/**"
                    ])
        }))
    }
    finalizedBy 'jacocoTestCoverageVerification'
}
test.finalizedBy 'jacocoTestReport'

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
            includes = [
                    '**/domain/**'
            ]
//            excludes = [
//                    "com/mungta/questionsservice/QuestionsServiceApplication.class",
//                    "com/mungta/questionsservice/common/**",
//                    "com/mungta/questionsservice/config/**",
//                    "com/mungta/questionsservice/domain/BaseEntity.class",
//                    "com/mungta/questionsservice/domain/question/dto/**",
//                    "com/mungta/questionsservice/domain/response/dto/**"
//            ]
        }
    }
}

test {
    useJUnitPlatform()
//    jacoco {
//        excludes += [
//                "com/mungta/questionsservice/QuestionsServiceApplication.class",
//                "com/mungta/questionsservice/common/**",
//                "com/mungta/questionsservice/config/**",
//                "com/mungta/questionsservice/domain/BaseEntity.class",
//                "com/mungta/questionsservice/domain/question/dto/**",
//                "com/mungta/questionsservice/domain/response/dto/**"
//        ]
//    }
}

sonarqube {
    properties {
        property "sonar.projectName", "questions-service"
        property "sonar.projectKey", "questions-service"
        property "sonar.host.url", "http://20.232.233.156:9000"
        property "sonar.login", "2d6ff96d704a385abd8b3559d85e2b66cf7f39e0"
        property "sonar.sourceEncoding", "UTF-8"
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.flywaydb:flyway-core:8.5.13'
    implementation "org.flywaydb:flyway-mysql"
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    //swagger
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
}

task localRun {
    doFirst {
        bootRun.systemProperty "spring.profiles.active", "local"
    }
}

task devRun {
    doFirst {
        bootRun.systemProperty "spring.profiles.active", "dev"
    }
}

task prodRun {
    doFirst {
        bootRun.systemProperty "spring.profiles.active", "prod"
    }
}
